<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekLeng</title>
  
  <subtitle>Front-end Dev Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geek-lhj.github.io/"/>
  <updated>2020-01-17T09:46:07.107Z</updated>
  <id>https://geek-lhj.github.io/</id>
  
  <author>
    <name>GeekLeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://geek-lhj.github.io/2020/01/05/hello-world/"/>
    <id>https://geek-lhj.github.io/2020/01/05/hello-world/</id>
    <published>2020-01-05T09:37:04.418Z</published>
    <updated>2020-01-17T09:46:07.107Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git教程笔记</title>
    <link href="https://geek-lhj.github.io/2019/03/10/Git%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://geek-lhj.github.io/2019/03/10/Git%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2019-03-10T10:38:58.000Z</published>
    <updated>2020-01-17T09:46:19.895Z</updated>
    
    <content type="html"><![CDATA[<p>Git是目前世界上最先进的分布式版本控制系统，该文档是菜鸟教程上面关于Git教程方面的知识，包括了使用 Git 前的相关知识，在不同系统中安装配置 Git，Git的相关操作(基本操作、分支管理、操作远程库等知识)，具体查看文档；</p><a id="more"></a><h1 id="Git教程笔记1"><a href="#Git教程笔记1" class="headerlink" title="Git教程笔记1"></a>Git教程笔记1</h1><blockquote><p><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">传送门</a></p></blockquote><h2 id="1-Git-安装配置"><a href="#1-Git-安装配置" class="headerlink" title="1. Git 安装配置"></a>1. Git 安装配置</h2><h3 id="1-1-Linux-Windows-Mac-平台上安装-略"><a href="#1-1-Linux-Windows-Mac-平台上安装-略" class="headerlink" title="1.1 Linux  | Windows | Mac 平台上安装(略)"></a>1.1 Linux  | Windows | Mac 平台上安装(略)</h3><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="noopener">http://git-scm.com/downloads</a></p><h3 id="1-2-Git-配置"><a href="#1-2-Git-配置" class="headerlink" title="1.2 Git 配置"></a>1.2 Git 配置</h3><p>Git 提供了一个叫做 <code>git config</code> 的工具，专门用来配置或读取相应的工作环境变量，这些环境变量，决定了 Git 在各个环节的具体工作方式和行为；</p><p>这些环境变量存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置；若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件；</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户；若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件；</li><li>当前项目的 <code>Git</code> 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效；每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量；</li></ul><h4 id="1-2-1-用户信息"><a href="#1-2-1-用户信息" class="headerlink" title="1.2.1 用户信息"></a>1.2.1 用户信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置个人的用户名称和电子邮件地址</span></span><br><span class="line">$ git config --global user.name <span class="string">"runoob"</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure><p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你<code>用户主目录</code>下的那个，以后你所有的项目都会默认使用这里配置的用户信息；<br>如果要在<code>某个特定的项目中</code>使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里；</p><p><strong>在项目中遇到了这样的问题，只要切换了不同项目（用户名称和电子邮件不同），就需要配置 SSH 秘钥才能成功上传代码，解决该问题方式就是对特定的项目中使用其他名字或者电邮，不加 –global 选项</strong></p><h4 id="1-2-2-文本编辑器"><a href="#1-2-2-文本编辑器" class="headerlink" title="1.2.2 文本编辑器"></a>1.2.2 文本编辑器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git默认使用的文本编辑器是 `Vi` 或者 `Vim`，如配置 Emacs 文本编辑器</span></span><br><span class="line">$ git config --global core.editor emacs</span><br></pre></td></tr></table></figure><h4 id="1-2-3-差异分析工具"><a href="#1-2-3-差异分析工具" class="headerlink" title="1.2.3 差异分析工具"></a>1.2.3 差异分析工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff</span></span><br><span class="line">$ git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure><p>Git 可以理解 <code>kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff</code> 等合并工具的输出信息；当然你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章；</p><h4 id="1-2-4-查看配置信息"><a href="#1-2-4-查看配置信息" class="headerlink" title="1.2.4 查看配置信息"></a>1.2.4 查看配置信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要检查已有的配置信息，使用 git config --list 命令；若看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig）</span></span><br><span class="line">$ git config --list</span><br><span class="line"><span class="comment"># 也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可</span></span><br><span class="line">$ git config user.name</span><br></pre></td></tr></table></figure><h2 id="2-Git-工作流程"><a href="#2-Git-工作流程" class="headerlink" title="2. Git 工作流程"></a>2. Git 工作流程</h2><p> <code>Git</code> 的一般工作流程如下：</p><ol><li>克隆 <code>Git</code> 资源作为工作目录；</li><li>在克隆的资源上添加或修改文件；</li><li>如果其他人修改了，你可以更新资源；</li><li>在提交前查看修改；</li><li>提交修改；</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交；</li></ol><p><img src="/2019/03/10/Git%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/1.png" alt="Git工作流程图"></p><h2 id="3-Git-工作区、暂存区和版本库"><a href="#3-Git-工作区、暂存区和版本库" class="headerlink" title="3. Git 工作区、暂存区和版本库"></a>3. Git 工作区、暂存区和版本库</h2><h3 id="3-1-三者的基本概念"><a href="#3-1-三者的基本概念" class="headerlink" title="3.1 三者的基本概念"></a>3.1 三者的基本概念</h3><ul><li><strong>工作区</strong>：就是你在电脑里能看到的目录；</li><li><strong>暂存区</strong>：英文叫 <code>stage或index</code> ；一般存放在 “<code>.git目录下</code>“ 下的<code>index</code>文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（index）；</li><li><strong>版本库</strong>：工作区有一个隐藏目录 <code>.git</code> ，这个不算工作区，而是Git的版本库；</li></ul><h3 id="3-2-三者之间的关系"><a href="#3-2-三者之间的关系" class="headerlink" title="3.2 三者之间的关系"></a>3.2 三者之间的关系</h3><p><img src="/2019/03/10/Git%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/2.png" alt="工作区暂存区版本库的关系图"></p><p>图中左侧为<code>工作区</code>，右侧为<code>版本库</code>。在版本库中标记为 “<code>index</code>“ 的区域是<code>暂存区</code>（<code>stage, index</code>），标记为 “master” 的是 master 分支所代表的目录树；图中我们可以看出此时 “<code>HEAD</code>“ 实际是指向 <code>master</code> 分支的一个”游标”；所以图示的命令中出现 <code>HEAD</code> 的地方可以用 <code>master</code> 来替换；图中的 <code>objects</code> 标识的区域为 Git 的对象库，实际位于 “<code>.git/objects</code>“ 目录下，里面包含了创建的各种对象及内容。</p><h2 id="4-Git-创建仓库"><a href="#4-Git-创建仓库" class="headerlink" title="4. Git 创建仓库"></a>4. Git 创建仓库</h2><h3 id="4-1-git-init"><a href="#4-1-git-init" class="headerlink" title="4.1 git init"></a>4.1 git init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用当前目录作为Git仓库，我们只需使它初始化，命令执行完后会在当前目录生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 指定目录作为Git仓库</span></span><br><span class="line">git init newrepo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下命令将目录下以 .c 结尾及 README 文件提交到仓库中</span></span><br><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m <span class="string">'初始化项目版本'</span></span><br></pre></td></tr></table></figure><h3 id="4-2-git-clone"><a href="#4-2-git-clone" class="headerlink" title="4.2 git clone"></a>4.2 git clone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从现有 Git 仓库中拷贝项目，repo:Git 仓库；directory:本地目录。</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br><span class="line"><span class="comment"># 如果需要克隆到指定的目录，可以使用以下命令格式</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Git-基本操作"><a href="#5-Git-基本操作" class="headerlink" title="5. Git 基本操作"></a>5. Git 基本操作</h2><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比；</p><h3 id="5-1-获取与创建项目命令"><a href="#5-1-获取与创建项目命令" class="headerlink" title="5.1 获取与创建项目命令"></a>5.1 获取与创建项目命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 git init 在目录中创建新的 Git 仓库</span></span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 用 git clone 拷贝一个 Git 仓库到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url] [dirName]</span><br></pre></td></tr></table></figure><h3 id="5-2-基本快照"><a href="#5-2-基本快照" class="headerlink" title="5.2 基本快照"></a>5.2 基本快照</h3><h4 id="5-1-1-git-add"><a href="#5-1-1-git-add" class="headerlink" title="5.1.1 git add"></a>5.1.1 git add</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git add 命令可将该文件添加到缓存, *或. 表示添加所有新增文件，也可以是具体的文件</span></span><br><span class="line">$ git add *</span><br></pre></td></tr></table></figure><h4 id="5-1-2-git-status"><a href="#5-1-2-git-status" class="headerlink" title="5.1.2 git status"></a>5.1.2 git status</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git status 命令用于查看项目的当前状态，查看在上次提交之后是否有修改，-s 表示以简短的结果输出</span></span><br><span class="line">$ git status -s</span><br></pre></td></tr></table></figure><h4 id="5-1-3-git-diff"><a href="#5-1-3-git-diff" class="headerlink" title="5.1.3 git diff"></a>5.1.3 git diff</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看执行 git status 的结果的详细信息，显示已写入缓存与已修改但尚未写入缓存的改动的区别</span></span><br><span class="line">$ git diff <span class="comment"># 尚未缓存的改动</span></span><br><span class="line">$ git diff --cached <span class="comment"># 查看已缓存的改动</span></span><br><span class="line">$ git diff HEAD <span class="comment"># 查看已缓存的与未缓存的所有改动</span></span><br><span class="line">$ git diff --<span class="built_in">stat</span> <span class="comment"># 显示摘要而非整个 diff</span></span><br></pre></td></tr></table></figure><h4 id="5-1-4-git-commit"><a href="#5-1-4-git-commit" class="headerlink" title="5.1.4 git commit"></a>5.1.4 git commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址，注意 --global 参数的使用</span></span><br><span class="line">$ git config --global user.name <span class="string">'runoob'</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br><span class="line"><span class="comment"># 使用 git add 命令将想要快照的内容写入缓存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 执行 git commit 将缓存区内容添加到仓库中，使用 -m 选项以在命令行中提供提交注释</span></span><br><span class="line">$ git commit -m <span class="string">'提交的注释信息'</span></span><br><span class="line"><span class="comment"># 若觉得 git add 提交缓存的流程繁琐，Git 也允许你用 -a 选项跳过这一步</span></span><br><span class="line">git commit -am <span class="string">'提交的注释信息（此前不需要 git add ）'</span></span><br></pre></td></tr></table></figure><h4 id="5-1-5-git-reset-HEAD"><a href="#5-1-5-git-reset-HEAD" class="headerlink" title="5.1.5 git reset HEAD"></a>5.1.5 git reset HEAD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消已缓存的文件内容；执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存</span></span><br><span class="line">$ git reset HEAD [fileName]</span><br></pre></td></tr></table></figure><h4 id="5-1-6-git-rm"><a href="#5-1-6-git-rm" class="headerlink" title="5.1.6 git rm"></a>5.1.6 git rm</h4><p>若只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 <code>Changes not staged for commit</code> 的提示；要从 <code>Git</code> 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除工作区目录文件，从已跟踪文件清单中移除</span></span><br><span class="line">$ git rm &lt;file&gt;</span><br><span class="line"><span class="comment"># 若删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</span></span><br><span class="line">$ git rm -f &lt;file&gt;</span><br><span class="line"><span class="comment"># 若把文件从暂存区域移除，但仍然希望保留在当前工作目录中；换句话说，仅是从跟踪清单中删除，使用 --cached 选项</span></span><br><span class="line">$ git rm --cached &lt;file&gt;</span><br><span class="line"><span class="comment"># 递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件</span></span><br><span class="line">$ git rm –r *</span><br></pre></td></tr></table></figure><h4 id="5-1-7-git-mv"><a href="#5-1-7-git-mv" class="headerlink" title="5.1.7 git mv"></a>5.1.7 git mv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git mv 命令用于移动或重命名一个文件、目录、软连接</span></span><br><span class="line">$ git mv [filename1]  [filename2]</span><br></pre></td></tr></table></figure><h2 id="6-Git-分支管理"><a href="#6-Git-分支管理" class="headerlink" title="6. Git 分支管理"></a>6. Git 分支管理</h2><ul><li>创建分支命令：<code>git branch (branchname)</code>；</li><li>切换分支命令：<code>git checkout (branchname)</code>；</li><li>合并分支命令：<code>git merge</code>；</li></ul><h3 id="6-1-列出、新建、切换分支"><a href="#6-1-列出、新建、切换分支" class="headerlink" title="6.1 列出、新建、切换分支"></a>6.1 列出、新建、切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出分支基本命令,不要加参数</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 加上参数就是表示创建一个分支，分支名就是参数值</span></span><br><span class="line">$ git branch (branchname)</span><br><span class="line"><span class="comment"># 切换到某一分支下</span></span><br><span class="line">$ git checkout (branch)</span><br><span class="line"><span class="comment"># 创建新分支并立即切换到该分支下</span></span><br><span class="line">$ git checkout -b (branchname)</span><br></pre></td></tr></table></figure><h3 id="6-2-删除分支"><a href="#6-2-删除分支" class="headerlink" title="6.2 删除分支"></a>6.2 删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除分支命令</span></span><br><span class="line">$ git branch -d (branchname)</span><br></pre></td></tr></table></figure><h3 id="6-3-分支合并"><a href="#6-3-分支合并" class="headerlink" title="6.3 分支合并"></a>6.3 分支合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用以下命令将任何分支合并到当前分支中去</span></span><br><span class="line">$ git merge (branchname)</span><br></pre></td></tr></table></figure><h3 id="6-4-合并冲突"><a href="#6-4-合并冲突" class="headerlink" title="6.4 合并冲突"></a>6.4 合并冲突</h3><p>在 Git 中，若合并冲突出现了，我们需要手动去修改它，在修改完成后，我们可以用 <code>git add</code> 要告诉 <code>Git</code> 文件冲突已经解决，然后再使用 <code>git commit</code> 提交结果；</p><h2 id="7-Git-查看提交历史"><a href="#7-Git-查看提交历史" class="headerlink" title="7. Git 查看提交历史"></a>7. Git 查看提交历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 git log 命令列出历史提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 可以用 --oneline 选项来查看历史记录的简洁的版本</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line"><span class="comment"># 还可以用 --graph 选项，查看历史中什么时候出现了分支、合并，开启了拓扑图选项</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph</span><br><span class="line"><span class="comment"># 也可以用 --reverse 参数来逆向显示所有日志</span></span><br><span class="line">$ git <span class="built_in">log</span> --reverse --oneline</span><br><span class="line"><span class="comment"># 只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分</span></span><br><span class="line">$ git <span class="built_in">log</span> --author=Linus --oneline -5</span><br><span class="line"><span class="comment"># 如果要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after ; 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（还用了 --no-merges 选项以隐藏合并提交）</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span><br></pre></td></tr></table></figure><h2 id="8-Git-标签"><a href="#8-Git-标签" class="headerlink" title="8. Git 标签"></a>8. Git 标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，使用 `git tag` 给它打上标签; -a 选项意为"创建一个带注解的标签"; -m 选项为添加的标签注释内容</span></span><br><span class="line">$ git tag -a v1.0</span><br><span class="line"><span class="comment"># 查看项目中的标签</span></span><br><span class="line">$ git <span class="built_in">log</span> --decorate</span><br><span class="line"><span class="comment"># 若忘了给某个提交打标签，又将它发布了，我们可以给它追加标签, 85fc7e7 为那次修改发布的哈希值</span></span><br><span class="line">$ git tag -a v0.9 85fc7e7</span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph</span><br><span class="line"><span class="comment"># 指定标签信息命令</span></span><br><span class="line">$ git tag -a &lt;tagname&gt; -m <span class="string">"标签注释内容"</span></span><br><span class="line"><span class="comment"># PGP签名标签命令：</span></span><br><span class="line">$ git tag -s &lt;tagname&gt; -m <span class="string">"标签注释内容"</span></span><br></pre></td></tr></table></figure><h2 id="9-Git-Github"><a href="#9-Git-Github" class="headerlink" title="9. Git Github"></a>9. Git Github</h2><h3 id="9-1-添加远程库"><a href="#9-1-添加远程库" class="headerlink" title="9.1 添加远程库"></a>9.1 添加远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>配置 <code>SSH</code> 秘钥连接 <code>GitHub</code> 远程库步骤：</p><ol><li>执行以下命令生成 <code>SSH Key</code>：<code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>；其中邮件名称是你在 <code>Github</code> 上注册的邮箱；</li><li>接着会要求确认路径和输入密码，这使用默认的一路回车就行，会在<code>~/</code> 目录下生成 <code>.ssh</code> 文件夹，如<code>C:\Users\&lt;username&gt;\.ssh</code>，进去打开 <code>id_rsa.pub</code>，复制里面的 <code>key</code> ；</li><li>回到 <code>github</code> 上，进入 <code>Account =&gt; Settings</code>（账户配置），新增 <code>SSH key</code>；</li><li>为了验证是否成功，输入以下命令：<code>$ ssh -T git@github.com</code>；</li></ol><h3 id="9-2-查看当前的远程库"><a href="#9-2-查看当前的远程库" class="headerlink" title="9.2 查看当前的远程库"></a>9.2 查看当前的远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要查看当前配置有哪些远程仓库，可以用命令</span></span><br><span class="line">$ git remote</span><br><span class="line"><span class="comment"># 执行时加上 -v 参数，你还可以看到每个别名的实际链接地址</span></span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h3 id="9-3-提取远程仓库"><a href="#9-3-提取远程仓库" class="headerlink" title="9.3 提取远程仓库"></a>9.3 提取远程仓库</h3><p>Git 有两个命令用来提取远程仓库的更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 从远程仓库下载新分支与数据，该命令执行完后需要执行git merge 远程分支到你所在的分支</span></span><br><span class="line">$ git fetch</span><br><span class="line"><span class="comment"># 2. 从远端仓库提取数据并尝试合并到当前分支，该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支</span></span><br><span class="line">$ git merge</span><br></pre></td></tr></table></figure><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 <code>git fetch [alias]</code> 告诉 Git 去获取它有你没有的数据，然后你可以执行 <code>git merge [alias]/[branch]</code> 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支；</p><h4 id="9-3-1-推送到远程仓库"><a href="#9-3-1-推送到远程仓库" class="headerlink" title="9.3.1 推送到远程仓库"></a>9.3.1 推送到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送你的新分支与数据到某个远端仓库命令,该命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支</span></span><br><span class="line">$ git push [<span class="built_in">alias</span>] [branch]</span><br></pre></td></tr></table></figure><h4 id="9-3-2-删除远程仓库"><a href="#9-3-2-删除远程仓库" class="headerlink" title="9.3.2 删除远程仓库"></a>9.3.2 删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远程仓库你可以使用命令：</span></span><br><span class="line">$ git remote rm [<span class="built_in">alias</span>]</span><br><span class="line"><span class="comment"># 例如：在原有的远程仓库上新增一个，然后再删除</span></span><br><span class="line"><span class="comment"># 1. 先查看当前配置有哪些远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"><span class="comment"># 2. 添加仓库 origin2，再查看远程仓库</span></span><br><span class="line">$ git remote add origin2 git@github.com:tianqixin/runoob-git-test.git</span><br><span class="line">$ git remote -v</span><br><span class="line"><span class="comment"># 删除仓库 origin2，再查看远程仓库</span></span><br><span class="line">$ git remote rm origin2</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h2 id="10-Git-CODING"><a href="#10-Git-CODING" class="headerlink" title="10. Git CODING"></a>10. Git CODING</h2><p>由于 GitHub 的访问速度太慢，常还会出现丢包、失去连接等情况；因而使用国内服务器的托管平台 <code>CODING</code>；</p><p>将 <code>GitHub</code> 上的代码迁移到 <code>CODING</code> 的步骤：</p><ol><li>创建 CODING 项目；</li><li>将 GitHub 代码 Pull 到本地；</li><li>本地关联 CODING 仓库，Push 代码到 CODING；<ul><li>首先执行命令查看当前配置的远程仓库：<code>git remote -v</code>;</li><li>接下来执行以下命令，来关联 <code>CODING</code> 远程仓库，要先删除现有的仓库关联，在将仓库关联到 <code>CODING</code> 的地址，并且将代码 <code>Push</code> 到 <code>master</code> 分支：</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br><span class="line">$ git remote add origin https://git.coding.net/xxx/xxx.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p><code>CODING</code> 仓库的免密码 <code>Push/Pull</code>：配置<code>SSH Key</code>；</p><h2 id="11-Git-服务器搭建-没有动手测试"><a href="#11-Git-服务器搭建-没有动手测试" class="headerlink" title="11. Git 服务器搭建(没有动手测试)"></a>11. Git 服务器搭建(没有动手测试)</h2><p><code>Github</code> 公开的项目是免费的，但是如果你不想让其他人看到你的项目就需要收费，因而我们就需要自己搭建一台Git服务器作为私有仓库使用；接下来我们将以 <code>Centos</code> 为例搭建 <code>Git</code> 服务器：</p><h3 id="11-1-安装Git"><a href="#11-1-安装Git" class="headerlink" title="11.1 安装Git"></a>11.1 安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">$ yum install git</span><br><span class="line"><span class="comment"># 接下来我们 创建一个git用户组和用户，用来运行git服务</span></span><br><span class="line">$ groupadd git</span><br><span class="line">$ useradd git -g git</span><br></pre></td></tr></table></figure><h3 id="11-2-创建证书登录"><a href="#11-2-创建证书登录" class="headerlink" title="11.2 创建证书登录"></a>11.2 创建证书登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个，若没有就创建它；</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/git/</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ chmod 755 .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br><span class="line">$ chmod 644 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="11-3-初始化Git仓库"><a href="#11-3-初始化Git仓库" class="headerlink" title="11.3 初始化Git仓库"></a>11.3 初始化Git仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先选定一个目录作为Git仓库，假定是/home/gitrepo/runoob.git，在/home/gitrepo目录下输入命令</span></span><br><span class="line">$ <span class="built_in">cd</span> /home</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/</span><br><span class="line">$ <span class="built_in">cd</span> gitrepo</span><br><span class="line"></span><br><span class="line">$ git init --bare runoob.git</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /home/gitrepo/runoob.git/</span><br><span class="line"><span class="comment"># 以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git</span></span><br><span class="line">$ chown -R git:git runoob.git</span><br></pre></td></tr></table></figure><h3 id="11-4-克隆仓库"><a href="#11-4-克隆仓库" class="headerlink" title="11.4 克隆仓库"></a>11.4 克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.45.4 为 Git 所在服务器 ip ，需要将其修改为你自己的 Git 服务 ip;</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@192.168.45.4:/home/gitrepo/runoob.git</span><br></pre></td></tr></table></figure><p>这样我们的 Git 服务器安装就完成；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是目前世界上最先进的分布式版本控制系统，该文档是菜鸟教程上面关于Git教程方面的知识，包括了使用 Git 前的相关知识，在不同系统中安装配置 Git，Git的相关操作(基本操作、分支管理、操作远程库等知识)，具体查看文档；&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://geek-lhj.github.io/categories/Git/"/>
    
      <category term="官方文档" scheme="https://geek-lhj.github.io/categories/Git/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Git" scheme="https://geek-lhj.github.io/tags/Git/"/>
    
      <category term="Git操作文档" scheme="https://geek-lhj.github.io/tags/Git%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>
